{
  "name": "Thorio",
  "tagline": "thor.io - a tiny experimental realtime framework for nodeJS.  Influenced by XSockets.NET ",
  "body": "# thor.io ( working title ) \r\nthor.io ( working title )  - a tiny experimental realtime framework for nodeJS.  Influenced by XSockets.NET. The purpose of the project is to experiment with the concepts of the brilliant XSockets.NET framework in general in a node.js environment. I strongly recommend you all to have a closer look at XSockets.NET on ([http://xsockets.net)](http://xsockets.net).  \r\n\r\n##Introduction\r\n\r\n\r\nSee https://github.com/MagnusThor/thorio/wiki for more info\r\n\r\n\r\n##Depencencies \r\n\r\npackage.json\r\n\r\n     \"dependencies\": {\r\n       \"express\": \"^4.13.4\",\r\n       \"express-ws\": \"^1.0.0\"\r\n      }\r\n\r\n\r\n##Serve using express & express-ws (node.js)\r\n\r\nSet up a ThorIO.Engine\r\n\r\n###server.js\r\n\r\n\r\n\tvar express = require(\"express\"); app = express();\r\n\tvar ThorIO = require(\"./thor-io.js\").ThorIO;\r\n\tvar myControllers = require(\"./Controllers/Controllers.js\").MyControllers\r\n\t\r\n\tvar thorIO = new ThorIO.Engine([{ alias: \"foo\", instance: myControllers.FooController }]);\r\n\t\r\n\tvar expressWs = require(\"express-ws\")(app);\r\n\t\r\n\tapp.use('/test', express.static('test'));\r\n\t\r\n\tapp.ws(\"/\", function (ws, req) {\r\n\tthorIO.addConnection(ws);\r\n\t});\r\n\t\r\n\tapp.listen(process.env.port || 1337);\r\n\r\n\r\n\r\n###Controllers.js\r\n\r\nA simple ThorIO.Controller\r\n\r\n\r\n\tvar MyControllers = {};\r\n\r\n\tMyControllers.FooController = (function () {\r\n\t    var fooController = function (client) {\r\n\t        this.alias = \"foo\"; // mandatory member\r\n\t        this.client = client; // mandatory member\r\n\t        this.age = 1;\r\n\t    }\r\n\t    \r\n\t    // optional memmber\r\n\t    fooController.prototype.onclose = function (timestamp) {\r\n\t        this.invoke({ message: \"onclose fired on foo\", created: timestamp.toString(), age: this.age }, \"say\", this.alias);\r\n\t    },\r\n\t    // optional member\r\n\t    fooController.prototype.onopen = function (timestamp) {\r\n\t        this.invoke({ message: \"onopen fired on foo\", created: timestamp.toString(), age: this.age }, \"say\", this.alias);\r\n\t    },\r\n\t    // send a message to all clients connected to foo\r\n\t    fooController.prototype.all = function (data, controller, topic) {\r\n\t        this.invokeToAll({ message: data.message, created: data.created, age: this.age }, \"say\", this.alias);\r\n\t    };\r\n\t    // send a message to callee  \r\n\t    fooController.prototype.say = function (data, controller, topic) {\r\n\t        this.invoke({ message: data.message, created: data.created, age: this.age }, \"say\", this.alias);\r\n\t    };    \r\n\t    // send to all clients with an .age greater or equal to 10\r\n\t    fooController.prototype.sayTo = function (data, controller, topic) {\r\n\t        var expression = function (pre) {\r\n\t            return pre.foo.age >= 10;\r\n\t        };\r\n\t        this.invokeTo(expression,\r\n\t            { message: data.message, created: data.created, age: this.age }, \"say\", this.alias);\r\n\t        this.publishToAll({ a:1 }, \"bar\", this.alias);\r\n\t    };\r\n    return fooController;\r\n\t})();\r\n\t// exports\r\n\texports.MyControllers = MyControllers;\r\n  \r\n\r\n##Connect and use using the ThorIO.Client JavaScript API\r\n\r\nMake sure you got this file referenced\r\n\r\n       https://github.com/MagnusThor/thorio/blob/master/src/client/thorio.client.latest.js\r\n\r\n####client.js\r\n\r\nCreate a connection to an endpoint and a controller (**controller.js** above) using the `ThorIOClient.Factory ` & `ThorIO.Channel`, send, recieve and more....\r\n\r\n    var doc = document;\r\n    var client;\r\n    var addMessage = function(message) {\r\n    \tvar li = doc.createElement(\"li\");\r\n    \tvar mark = doc.createElement(\"mark\");\r\n    \tmark.textContent = message.created;\r\n    \tvar span = doc.createElement(\"span\");\r\n    \tspan.textContent = message.message;\r\n    \tli.appendChild(mark);\r\n    \tli.appendChild(span);\r\n    \tdoc.querySelector(\"#messages\").appendChild(li);\r\n    };\r\n    doc.addEventListener(\"DOMContentLoaded\", function() {\r\n    \tclient = new ThorIOClient.Factory(\"ws://localhost:1337\", [\"foo\"]);\r\n    \tclient.onopen = function(foo) {\r\n    \t\tdoc.querySelector(\"#close\").addEventListener(\"click\", function() {\r\n    \t\t\tfoo.close();\r\n    \t\t});\r\n    \t\taddMessage({\r\n    \t\t\tmessage: \"Connected to endpoint...\",\r\n    \t\t\tcreated: new Date()\r\n    \t\t});\r\n    \t\tfoo.connect();\r\n    \t\tfoo.onclose = function(message) {\r\n    \t\t\taddMessage({\r\n    \t\t\t\tmessage: \"Disconnected to fooController\",\r\n    \t\t\t\tcreated: new Date()\r\n    \t\t\t});\r\n    \t\t};\r\n    \t\tfoo.onopen = function(message) {\r\n    \t\t\taddMessage({\r\n    \t\t\t\tmessage: \"Connected to fooController\",\r\n    \t\t\t\tcreated: new Date()\r\n    \t\t\t});\r\n    \t\t\taddMessage({\r\n    \t\t\t\tmessage: \"adding a subscription to 'bar'.\",\r\n    \t\t\t\tcreated: new Date()\r\n    \t\t\t});\r\n    \t\t\tfoo.subscribe(\"bar\", function() {\r\n    \t\t\t\taddMessage({\r\n    \t\t\t\t\tmessage: \"got a message on bar...\",\r\n    \t\t\t\t\tcreated: new Date()\r\n    \t\t\t\t});\r\n    \t\t\t});\r\n    \t\t\tfoo.setProperty(\"age\", 11);\r\n    \t\t\taddMessage({\r\n    \t\t\t\tmessage: \"Setting .age to 11 using setProperty ( see code ) \",\r\n    \t\t\t\tcreated: new Date()\r\n    \t\t\t});\r\n    \t\t};\r\n    \t\tdoc.querySelector(\"#unsubscribe\").addEventListener(\"click\", function() {\r\n    \t\t\tfoo.unsubscribe(\"bar\");\r\n    \t\t\taddMessage({\r\n    \t\t\t\tmessage: \"removing subscription to 'bar'.\",\r\n    \t\t\t\tcreated: new Date()\r\n    \t\t\t});\r\n    \t\t});\r\n    \t\tdoc.querySelector(\"#age\").addEventListener(\"input\", function() {\r\n    \t\t\tif (!Number.isInteger(parseInt(this.value))) return;\r\n    \t\t\tfoo.setProperty(\"age\", parseInt(this.value));\r\n    \t\t});\r\n    \t\tdoc.querySelector(\"#message\").addEventListener(\"keydown\", function(event) {\r\n    \t\t\tif (event.keyCode === 13) {\r\n    \t\t\t\tevent.preventDefault();\r\n    \t\t\t\tfoo.invoke(\"sayTo\", {\r\n    \t\t\t\t\tmessage: this.value,\r\n    \t\t\t\t\tcreated: new Date()\r\n    \t\t\t\t});\r\n    \t\t\t\tthis.value = \"\";\r\n    \t\t\t};\r\n    \t\t});\r\n    \t\tfoo.on(\"say\", function(message) {\r\n    \t\t\taddMessage(message);\r\n    \t\t});\r\n    \t};\r\n    });\r\n\r\n\r\n#### index.html\r\n\r\n\t\t<h1>Example</h1>\r\n\t\t<hr />\r\n\t\t<div>\r\n\t\t\t<input type=\"text\" id=\"message\" placeholder=\"Say something...\"\r\n\t\t\t/>\r\n\t\t\t<input type=\"number\" id=\"age\" min=\"1\" max=\"99\"\r\n\t\t\t\tvalue=\"11\" /> * if age ( number field )\r\n\t\t\tis less than 10 message will be filtered\r\n\t\t\taway, as the server controller just sends\r\n\t\t\tto clients where age >= 10 ..\r\n\t\t\r\n\t\t</div>\r\n\t\t<ul id=\"messages\"></ul>\r\n\t\t\r\n\t\t<button id=\"close\">Close connection to 'foo'</button>\r\n\t\t<button id=\"unsubscribe\">Unsubscribe topic 'bar'</button>\r\n\r\n\r\n##Example \r\n   \r\nThere is a running example on [http://thorio.azurewebsites.net/test](http://thorio.azurewebsites.net/test) , you will find the code (client) in the test folder of the repo\r\n\r\n##Documentation\r\n\r\nThere is a first version of the dox available here - https://github.com/MagnusThor/thorio/wiki\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}